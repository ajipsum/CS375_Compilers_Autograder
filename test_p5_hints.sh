#/usr/bin/env bash

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test0 symbol table >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> Symbol table level 1 should contain type and var defs"
echo ">>> Hints:"
echo ">>>     0. john, mary, fred, and ptr should have basicdt set to 4 instead of 0"
echo ">>>     1. Symbol c and d’s typ should be the same as complex’s typ, not complex’s address."
echo ">>>     2. Symbol john, mary, fred, and ptr’s typ should be same as pp’s typ, not pp’s address."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test1 funcall new() >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    new(john);new(mary);new(fred)"

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test1_0 funcall new() >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    new(joh);new(mry);new(frd)"
echo ">>> Hints:"
echo ">>>     0. Record size should always be a multiple of 16"

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test2 pointer and rec reference (simple) >>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    john^.favorite := blue;"
echo ">>>    john^.age := 19;       "
echo ">>>    john^.friend := mary;  "
echo ">>>    john^.salary := 40000.0;"
echo ">>>    mary^.age := 21;       "
echo ">>>    mary^.friend := fred;  "
echo ">>>    fred^.age := 20;       "
echo ">>>    fred^.friend := nil;   "
echo ">>>    sum := sum + ptr^.age; "
echo ">>>    ptr := ptr^.friend     "
echo ">>> Hints:"
echo ">>>     0. john's salary should stay real, if your parser"
echo ">>>        converts it to 40000, it means your parser does"
echo ">>>        not know the lhs is a real."
echo ">>>     1. nil should be converted to 0, whose basicdt should"
echo ">>>        be pointer. If you see 'res 15' in your output tree,"
echo ">>>        it means your parser considers nil as a reserved word."
echo ">>>     2. The TA can change any of these numbers and your parser"
echo ">>>        should always work."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test2_0 pointer and rec reference (simple) >>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    jhn^.favorite := red; "
echo ">>>    jhn^.age := 29;       "
echo ">>>    jhn^.friend := mry;   "
echo ">>>    jhn^.salary := 234.0; "
echo ">>>    sum := sum + ptr^.age;"
echo ">>>    ptr := ptr^.friend    "
echo ">>> Hints:"
echo ">>>     0. Your parser should work regardless of the names."
echo ">>>     1. The TA can change any of these numbers and your parser"
echo ">>>        should always work."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test3 pointer and rec reference (hard) >>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    john^.location.re := 3;"
echo ">>>    john^.friend^.friend^.location.im := 4.5"
echo ">>> Hints:"
echo ">>>     0. 3 should be converted to 3.0 while 4.5 should"
echo ">>>        stay real"
echo ">>>     1. The TA can change any of these numbers and your parser"
echo ">>>        should always work."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test3_1 pointer and rec reference (hard) >>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    john^.friend^.friend^.location.mi := 44.55"
echo ">>> Hints:"
echo ">>>     0. The TA can change any of these numbers and your parser"
echo ">>>        should always work."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test4 array access >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    ac[7].re := john^.salary;"
echo ">>>    people[i].age := ptr^.age;"
echo ">>>    aco[i,white] := john^.favorite"
echo ">>> Hints:"
echo ">>>     0. The offset should be simplified. E.g. (i-1)*48"
echo ">>>        is not simplified."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test4_0 array access >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    ac[5].mi := john^.salary"
echo ">>> Hints:"
echo ">>>     0. The TA can change the index to any int between 1 and 10"
echo ">>>        and your parser should always work"

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test4_1 array access >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    people[i].salary := ptr^.salary"
echo ">>> Hints:"
echo ">>>     0. your parser should be able update the offset of an aref"
echo ">>>        even if the offset is an expression containing i"
echo ">>>     1. Now the record has a size of 32 so that people[i] has"
echo ">>>        an offset of 32*i-32. The offset of salary inside the"
echo ">>>        record is 24. Therefore the final offset should be 32*i-8."
echo ">>>        Again, the offset should be simplified."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test4_2 array access >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    aco[i,white] := john^.favorite"
echo ">>> Hints:"
echo ">>>     0. The difference from test4 is that now the"
echo ">>>        record is different. Again, offset should be simplified."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test5 while loop >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    while ptr <> nil do"
echo ">>>      begin"
echo ">>>        i := i + 1"
echo ">>>      end"
echo ">>> Hints:"
echo ">>>     0. Again, nil should be 0. If you see 'res 15',"
echo ">>>        it means your parser considers it as a reserved word."

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test6 label/goto stmt >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    1492:"
echo ">>>      john^.friend := mary;"
echo ">>>    1776:"
echo ">>>      fred^.age := 20"
echo ">>>    if sum < 3 then goto 1776"

echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>> test7 write funcall >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
echo ">>> test cases:"
echo ">>>    write('i = ');"
echo ">>>    writeln(i);"
echo ">>>    write('Sum of ages = ');"
echo ">>>    writeln(sum);"
echo ">>>    write('Fred loc im = ');"
echo ">>>    writeln(fred^.location.im);"
echo ">>> Hints:"
echo ">>>     0. for i and sum, writelni should be used"
echo ">>>     1. for fred^.location.im, writelnf should be used."
echo ">>>        This requires the basicdt of aref is properly set."
